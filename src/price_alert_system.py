#!/usr/bin/env python3
"""
üö® Price Alert System - C·∫£nh b√°o gi√° thay ƒë·ªïi ƒë·ªôt bi·∫øn nh∆∞ Binance
Features:
- Ph√°t hi·ªán pump/dump ƒë·ªôt bi·∫øn
- Volume spike alerts
- Price breakout notifications
- Unusual trading activity detection
- Real-time monitoring all 422 USDT pairs
"""
import logging
import requests
import json
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import statistics
from collections import deque, defaultdict

class PriceAlertSystem:
    """Advanced Price Alert System for detecting sudden price movements"""
    
    def __init__(self, telegram_bot_token: str, telegram_chat_id: str):
        self.logger = logging.getLogger(__name__)
        self.bot_token = telegram_bot_token
        self.chat_id = telegram_chat_id
        
        # Alert settings
        self.alert_settings = {
            'pump_threshold': 15.0,      # % tƒÉng ƒë·ªôt bi·∫øn trong 5-15 ph√∫t
            'dump_threshold': -15.0,     # % gi·∫£m ƒë·ªôt bi·∫øn trong 5-15 ph√∫t
            'volume_spike_multiplier': 5.0,  # Volume tƒÉng x l·∫ßn so v·ªõi trung b√¨nh
            'price_breakout_threshold': 10.0,  # % breakout kh·ªèi range
            'min_volume_usdt': 100000,   # Volume t·ªëi thi·ªÉu ƒë·ªÉ alert (100k USDT)
            'time_window': 900,          # 15 ph√∫t (900 gi√¢y)
            'enabled': True
        }
        
        # Data storage cho analysis
        self.price_history = defaultdict(lambda: deque(maxlen=20))  # L∆∞u 20 data points g·∫ßn nh·∫•t
        self.volume_history = defaultdict(lambda: deque(maxlen=20))
        self.last_alerts = defaultdict(lambda: 0)  # Tr√°nh spam alerts
        
        # Monitoring status
        self.is_monitoring = False
        self.monitored_symbols = []
        
        # Alert statistics
        self.alert_stats = {
            'total_alerts': 0,
            'pump_alerts': 0,
            'dump_alerts': 0,
            'volume_alerts': 0,
            'breakout_alerts': 0
        }
        
    def start_monitoring(self, symbols: List[str] = None):
        """B·∫Øt ƒë·∫ßu monitoring gi√° thay ƒë·ªïi ƒë·ªôt bi·∫øn"""
        if symbols is None:
            # Monitor top 50 coins v·ªõi volume cao
            symbols = [
                'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT', 'DOGEUSDT', 'DOTUSDT',
                'AVAXUSDT', 'SHIBUSDT', 'LTCUSDT', 'LINKUSDT', 'ATOMUSDT', 'UNIUSDT', 'VETUSDT',
                'MATICUSDT', 'NEARUSDT', 'SANDUSDT', 'MANAUSDT', 'GALAUSDT', 'AXSUSDT', 'CHZUSDT',
                'AAVEUSDT', 'MKRUSDT', 'COMPUSDT', 'SNXUSDT', 'CRVUSDT', 'SUSHIUSDT', '1INCHUSDT',
                'YFIUSDT', 'BATUSDT', 'ENJUSDT', 'ZRXUSDT', 'UMAUSDT', 'RENUSDT', 'KNCUSDT',
                'LRCUSDT', 'BANDUSDT', 'STORJUSDT', 'ANKRUSDT', 'AUDIOUSDT', 'CTKUSDT', 'OCEANUSDT',
                'NMRUSDT', 'RLCUSDT', 'SCUSDT', 'ZENUSDT', 'SKLUSDT', 'CELRUSDT', 'FETUSDT'
            ]
        
        self.monitored_symbols = symbols
        self.is_monitoring = True
        
        # Start monitoring thread
        monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        monitor_thread.start()
        
        self.logger.info(f"üö® Started price alert monitoring for {len(symbols)} symbols")
        self._send_telegram_message(f"""üö® PRICE ALERT SYSTEM STARTED

üìä Monitoring: {len(symbols)} symbols
‚ö° Pump Alert: >{self.alert_settings['pump_threshold']}% trong 15 ph√∫t
üìâ Dump Alert: <{self.alert_settings['dump_threshold']}% trong 15 ph√∫t
üìà Volume Spike: {self.alert_settings['volume_spike_multiplier']}x trung b√¨nh
üí∞ Min Volume: {self.alert_settings['min_volume_usdt']:,} USDT

‚úÖ System ƒë√£ s·∫µn s√†ng ph√°t hi·ªán bi·∫øn ƒë·ªông ƒë·ªôt bi·∫øn!""")
    
    def stop_monitoring(self):
        """D·ª´ng monitoring"""
        self.is_monitoring = False
        self.logger.info("üõë Stopped price alert monitoring")
        self._send_telegram_message("üõë Price Alert System ƒë√£ d·ª´ng!")
    
    def _monitoring_loop(self):
        """Main monitoring loop"""
        while self.is_monitoring:
            try:
                # L·∫•y data cho t·∫•t c·∫£ symbols
                self._fetch_and_analyze_data()
                time.sleep(60)  # Check m·ªói 1 ph√∫t
                
            except Exception as e:
                self.logger.error(f"Error in monitoring loop: {e}")
                time.sleep(30)  # Wait 30s before retry
    
    def _fetch_and_analyze_data(self):
        """Fetch price data v√† analyze cho alerts"""
        try:
            # Get 24hr ticker data for all symbols
            url = "https://api.binance.com/api/v3/ticker/24hr"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                tickers = response.json()
                
                for ticker in tickers:
                    symbol = ticker['symbol']
                    if symbol not in self.monitored_symbols:
                        continue
                    
                    # Extract data
                    price = float(ticker['lastPrice'])
                    volume = float(ticker['quoteVolume'])  # Volume in USDT
                    price_change_pct = float(ticker['priceChangePercent'])
                    
                    # Update histories
                    self.price_history[symbol].append({
                        'timestamp': time.time(),
                        'price': price,
                        'change_pct': price_change_pct
                    })
                    
                    self.volume_history[symbol].append({
                        'timestamp': time.time(),
                        'volume': volume
                    })
                    
                    # Analyze for alerts
                    self._analyze_for_alerts(symbol, ticker)
                    
        except Exception as e:
            self.logger.error(f"Error fetching ticker data: {e}")
    
    def _analyze_for_alerts(self, symbol: str, ticker: dict):
        """Analyze symbol data for alert conditions"""
        try:
            current_time = time.time()
            
            # Tr√°nh spam alerts - ch·ªâ alert 1 l·∫ßn trong 30 ph√∫t cho m·ªói symbol
            if current_time - self.last_alerts[symbol] < 1800:  # 30 ph√∫t
                return
            
            price = float(ticker['lastPrice'])
            volume = float(ticker['quoteVolume'])
            price_change_pct = float(ticker['priceChangePercent'])
            
            # Skip n·∫øu volume qu√° th·∫•p
            if volume < self.alert_settings['min_volume_usdt']:
                return
            
            # Check for different alert types
            alert_triggered = False
            
            # 1. PUMP ALERT - TƒÉng ƒë·ªôt bi·∫øn
            if price_change_pct >= self.alert_settings['pump_threshold']:
                self._send_pump_alert(symbol, ticker)
                alert_triggered = True
                self.alert_stats['pump_alerts'] += 1
            
            # 2. DUMP ALERT - Gi·∫£m ƒë·ªôt bi·∫øn  
            elif price_change_pct <= self.alert_settings['dump_threshold']:
                self._send_dump_alert(symbol, ticker)
                alert_triggered = True
                self.alert_stats['dump_alerts'] += 1
            
            # 3. VOLUME SPIKE ALERT
            if self._detect_volume_spike(symbol, volume):
                self._send_volume_spike_alert(symbol, ticker)
                alert_triggered = True
                self.alert_stats['volume_alerts'] += 1
            
            # 4. PRICE BREAKOUT ALERT
            if self._detect_price_breakout(symbol, price):
                self._send_breakout_alert(symbol, ticker)
                alert_triggered = True
                self.alert_stats['breakout_alerts'] += 1
            
            if alert_triggered:
                self.last_alerts[symbol] = current_time
                self.alert_stats['total_alerts'] += 1
                
        except Exception as e:
            self.logger.error(f"Error analyzing {symbol}: {e}")
    
    def _detect_volume_spike(self, symbol: str, current_volume: float) -> bool:
        """Ph√°t hi·ªán volume spike"""
        try:
            if len(self.volume_history[symbol]) < 10:
                return False
            
            # T√≠nh volume trung b√¨nh c·ªßa 10 periods tr∆∞·ªõc
            recent_volumes = [entry['volume'] for entry in list(self.volume_history[symbol])[-10:]]
            avg_volume = statistics.mean(recent_volumes)
            
            # Check volume spike
            if avg_volume > 0 and current_volume > avg_volume * self.alert_settings['volume_spike_multiplier']:
                return True
                
            return False
        except Exception:
            return False
    
    def _detect_price_breakout(self, symbol: str, current_price: float) -> bool:
        """Ph√°t hi·ªán price breakout kh·ªèi trading range"""
        try:
            if len(self.price_history[symbol]) < 15:
                return False
            
            # L·∫•y gi√° c·ªßa 15 periods tr∆∞·ªõc
            recent_prices = [entry['price'] for entry in list(self.price_history[symbol])[-15:]]
            
            # T√≠nh support v√† resistance
            min_price = min(recent_prices)
            max_price = max(recent_prices)
            price_range = max_price - min_price
            
            if price_range == 0:
                return False
            
            # Check breakout
            breakout_threshold = price_range * (self.alert_settings['price_breakout_threshold'] / 100)
            
            if current_price > max_price + breakout_threshold or current_price < min_price - breakout_threshold:
                return True
                
            return False
        except Exception:
            return False
    
    def _send_pump_alert(self, symbol: str, ticker: dict):
        """G·ª≠i pump alert"""
        price = float(ticker['lastPrice'])
        change_pct = float(ticker['priceChangePercent'])
        volume = float(ticker['quoteVolume'])
        
        message = f"""üöÄ PUMP ALERT! 

üí∞ {symbol.replace('USDT', '')} 
üìà +{change_pct:.2f}% trong 24h!
üíµ Price: ${price:.6f}
üìä Volume: {self._format_volume(volume)}
üïê Time: {datetime.now().strftime('%H:%M:%S')}

‚ö° TƒÉng ƒë·ªôt bi·∫øn - C√¢n nh·∫Øc take profit!"""
        
        self._send_telegram_message(message)
    
    def _send_dump_alert(self, symbol: str, ticker: dict):
        """G·ª≠i dump alert"""
        price = float(ticker['lastPrice'])
        change_pct = float(ticker['priceChangePercent'])
        volume = float(ticker['quoteVolume'])
        
        message = f"""üìâ DUMP ALERT!

üí∞ {symbol.replace('USDT', '')}
üìâ {change_pct:.2f}% trong 24h!
üíµ Price: ${price:.6f}  
üìä Volume: {self._format_volume(volume)}
üïê Time: {datetime.now().strftime('%H:%M:%S')}

‚ö†Ô∏è Gi·∫£m ƒë·ªôt bi·∫øn - C·∫©n th·∫≠n stop loss!"""
        
        self._send_telegram_message(message)
    
    def _send_volume_spike_alert(self, symbol: str, ticker: dict):
        """G·ª≠i volume spike alert"""
        price = float(ticker['lastPrice'])
        change_pct = float(ticker['priceChangePercent'])
        volume = float(ticker['quoteVolume'])
        
        message = f"""üìä VOLUME SPIKE ALERT!

üí∞ {symbol.replace('USDT', '')}
üìà {change_pct:+.2f}%
üíµ Price: ${price:.6f}
üî• Volume: {self._format_volume(volume)}
üïê Time: {datetime.now().strftime('%H:%M:%S')}

‚ö° Volume tƒÉng ƒë·ªôt bi·∫øn - C√≥ th·ªÉ c√≥ tin t·ª©c l·ªõn!"""
        
        self._send_telegram_message(message)
    
    def _send_breakout_alert(self, symbol: str, ticker: dict):
        """G·ª≠i breakout alert"""
        price = float(ticker['lastPrice'])
        change_pct = float(ticker['priceChangePercent'])
        volume = float(ticker['quoteVolume'])
        
        direction = "UPWARD" if change_pct > 0 else "DOWNWARD"
        emoji = "üöÄ" if change_pct > 0 else "üìâ"
        
        message = f"""{emoji} BREAKOUT ALERT!

üí∞ {symbol.replace('USDT', '')}
üéØ {direction} BREAKOUT
üìà {change_pct:+.2f}%
üíµ Price: ${price:.6f}
üìä Volume: {self._format_volume(volume)}
üïê Time: {datetime.now().strftime('%H:%M:%S')}

üî• Price v∆∞·ª£t kh·ªèi trading range!"""
        
        self._send_telegram_message(message)
    
    def _format_volume(self, volume: float) -> str:
        """Format volume number"""
        if volume >= 1e9:
            return f"{volume/1e9:.1f}B"
        elif volume >= 1e6:
            return f"{volume/1e6:.1f}M"
        elif volume >= 1e3:
            return f"{volume/1e3:.1f}K"
        return f"{volume:.2f}"
    
    def _send_telegram_message(self, message: str):
        """G·ª≠i message qua Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                "chat_id": self.chat_id,
                "text": message
            }
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                self.logger.info("Alert sent successfully")
            else:
                self.logger.error(f"Failed to send alert: {response.status_code} - {response.text}")
        except Exception as e:
            self.logger.error(f"Error sending Telegram message: {e}")
    
    def get_alert_settings(self) -> dict:
        """L·∫•y current alert settings"""
        return self.alert_settings.copy()
    
    def update_alert_settings(self, **kwargs):
        """Update alert settings"""
        for key, value in kwargs.items():
            if key in self.alert_settings:
                self.alert_settings[key] = value
                self.logger.info(f"Updated {key} to {value}")
    
    def get_alert_stats(self) -> dict:
        """L·∫•y alert statistics"""
        stats = self.alert_stats.copy()
        stats['monitored_symbols'] = len(self.monitored_symbols)
        stats['is_monitoring'] = self.is_monitoring
        return stats
    
    def enable_alerts(self):
        """Enable alerts"""
        self.alert_settings['enabled'] = True
        self.logger.info("Alerts enabled")
    
    def disable_alerts(self):
        """Disable alerts"""
        self.alert_settings['enabled'] = False
        self.logger.info("Alerts disabled")
    
    def add_symbol_to_monitor(self, symbol: str):
        """Th√™m symbol v√†o danh s√°ch monitoring"""
        if symbol not in self.monitored_symbols:
            self.monitored_symbols.append(symbol)
            self.logger.info(f"Added {symbol} to monitoring list")
    
    def remove_symbol_from_monitor(self, symbol: str):
        """X√≥a symbol kh·ªèi danh s√°ch monitoring"""
        if symbol in self.monitored_symbols:
            self.monitored_symbols.remove(symbol)
            self.logger.info(f"Removed {symbol} from monitoring list")
    
    def get_monitored_symbols(self) -> List[str]:
        """L·∫•y danh s√°ch symbols ƒëang monitor"""
        return self.monitored_symbols.copy()